image: archlinux/base


stages:
    - formatting
    - builds
    - unit-tests
    - end-to-end-tests
    - tagging
    - building-tag


conventional-commits-next-version-formatting:
    stage: formatting
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S rust diffutils gawk grep --noconfirm
    script:
        - for i in $( du -a ./src/ | awk '{print $2}' | grep -i "[.]rs$" ); do
        - echo $i
        - cp $i temp.txt
        - rustfmt $i
        - cmp $i temp.txt
        - done
    rules:
        - if: $CI_COMMIT_BRANCH


end-to-end-tests-formatting:
    stage: formatting
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S python autopep8 --noconfirm
    script:
        - for i in $( du -a ./end-to-end-tests/ | awk '{print $2}' | grep -i "[.]py$" ); do
        - echo $i
        - cp $i temp.txt
        - autopep8 --in-place --aggressive --aggressive $i
        - cmp $i temp.txt
        - done
    rules:
        - if: $CI_COMMIT_BRANCH


builds:
    stage: builds
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel libffi rust --noconfirm
    script:
        - cargo build --release
    artifacts:
        paths:
            - target/release/conventional_commits_next_version
    rules:
        - if: $CI_COMMIT_BRANCH


unit-tests:
    stage: unit-tests
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel libffi rust --noconfirm
    script:
        - cargo test
    rules:
        - if: $CI_COMMIT_BRANCH


end-to-end-tests:
    stage: end-to-end-tests
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S git python python-pip --noconfirm
        - cd end-to-end-tests/
        - pip install -r requirements.txt
    script:
        - behave
    rules:
        - if: $CI_COMMIT_BRANCH


tagging:
    stage: tagging
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel git openssh --noconfirm
    script:
        # Get version.
        - VERSION=`grep '^version = "[0-9].[0-9].[0-9]"$' Cargo.toml | cut -d '"' -f 2`
        - VERSION_EXISTS=`echo $VERSION | grep '^[0-9].[0-9].[0-9]$' | wc -l`
        - test $VERSION_EXISTS -ne 1 && { echo >&2 "Unable to parse out the semantic version. Aborting."; exit 1;}
        # Test if tag already exists for version.
        - VERSION_TAG_EXISTS=`git show-ref --tags -d | awk "/ refs\/tags\/$VERSION/" | wc -l`
        - test $VERSION_TAG_EXISTS -eq 1 && exit 0
        # Create release/new tag.
        - release-cli create --name $VERSION --description release-branch-$CI_COMMIT_REF_NAME-$CI_JOB_ID --tag-name $VERSION --ref $CI_COMMIT_SHA
    rules:
        - if: $CI_COMMIT_BRANCH == "master"


building-tag:
    stage: building-tag
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel libffi rust --noconfirm
    script:
        - cargo build --release
        - mv target/release/conventional_commits_next_version conventional_commits_next_version-$CI_COMMIT_TAG
    artifacts:
        paths:
            - conventional_commits_next_version-$CI_COMMIT_TAG
    rules:
        - if: $CI_COMMIT_TAG

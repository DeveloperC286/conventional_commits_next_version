stages:
  - clean-git-history-checking
  - conventional-commits-linting
  - conventional-commits-next-version-checking
  - formatting
  - linting
  - compiling
  - unit-testing
  - end-to-end-testing
  - releasing
  - crates-io-publishing
  - release-binary-compiling


variables:
  SEMANTIC_VERSIONING_REGEX: "[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*"
  RELEASE_BIN_NAME: "release-cli-linux-amd64"
  GIT_CLIFF_VERSION: "0.5.0"


clean-git-history-checking:
  stage: clean-git-history-checking
  image: rust
  before_script:
    - cargo install clean_git_history
  script:
    # Check all the commits in the branch.
    - /usr/local/cargo/bin/clean_git_history --from-reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-linting:
  stage: conventional-commits-linting
  image: rust
  before_script:
    - cargo install conventional_commits_linter
  script:
    # Lint all the commits in the branch.
    - /usr/local/cargo/bin/conventional_commits_linter --from-reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}" --allow-angular-type-only
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-next-version-checking:
  stage: conventional-commits-next-version-checking
  image: rust
  before_script:
    - cargo install conventional_commits_next_version
  script:
    # Get current version.
    - current_version=$(grep "^version = \"${SEMANTIC_VERSIONING_REGEX}\"$" "Cargo.toml" | cut -d '"' -f 2)
    # Get latest tag.
    - latest_tag=$(git tag --sort=-committerdate | head -1)
    # Check current vs expected.
    - /usr/local/cargo/bin/conventional_commits_next_version --batch-commits --from-reference "${latest_tag}" --from-version "${latest_tag}" --current-version "${current_version}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-next-version-formatting:
  stage: formatting
  image: rust
  before_script:
    - rustup component add rustfmt
  script:
    - cargo fmt --all -- --check --config=group_imports=StdExternalCrate
  rules:
    - if: $CI_MERGE_REQUEST_ID


end-to-end-tests-formatting:
  stage: formatting
  image: python:3-slim
  before_script:
    - pip3 install autopep8
  script:
    - for i in $(du -a "./end-to-end-tests/" | awk '{print $2}' | grep -i "[.]py$"); do
    - cp "$i" "temp.txt"
    - autopep8 --in-place --aggressive --aggressive "$i"
    - cmp "$i" "temp.txt" || ( echo "$i needs formatted." && exit 1 )
    - done
  rules:
    - if: $CI_MERGE_REQUEST_ID


linting:
  stage: linting
  image: rust
  before_script:
    - rustup component add clippy
  script:
    - cargo clippy --verbose --workspace --all-targets -- -D warnings
    - cargo clippy --verbose --workspace --all-targets --all-features -- -D warnings
    - cargo clippy --verbose --workspace --all-targets --no-default-features -- -D warnings
  rules:
    - if: $CI_MERGE_REQUEST_ID


compiling:
  stage: compiling
  image: rust
  script:
    - cargo build --verbose --workspace
    - cargo build --verbose --workspace --all-features
    - cargo build --verbose --workspace --no-default-features
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "master"


unit-testing:
  stage: unit-testing
  image: rust
  script:
    - cargo test --verbose --workspace
    - cargo test --verbose --workspace --all-features
    - cargo test --verbose --workspace --no-default-features
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "master"


end-to-end-testing:
  stage: end-to-end-testing
  image: rust
  before_script:
    - apt update
    - apt install python3-minimal python3-pip git -y
    - cargo build
    - cd end-to-end-tests/
    - pip3 install -r requirements.txt
  script:
    - behave
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "master"


releasing:
  stage: releasing
  image: rust
  script:
    # Get current version.
    - current_version=$(grep "^version = \"${SEMANTIC_VERSIONING_REGEX}\"$" "Cargo.toml" | cut -d '"' -f 2)
    # If the tag already exist then exit.
    - new_tag=${current_version}
    - git tag -l | grep -q "^${new_tag}$" && exit 0
    # Get latest tag.
    - latest_tag=$(git tag --sort=-committerdate | head -1)
    # Install release description generator.
    - wget "https://github.com/orhun/git-cliff/releases/download/v${GIT_CLIFF_VERSION}/git-cliff-${GIT_CLIFF_VERSION}-x86_64-unknown-linux-musl.tar.gz"
    - tar xzvf "git-cliff-${GIT_CLIFF_VERSION}-x86_64-unknown-linux-musl.tar.gz"
    # Generate the release description.
    - release_description=$(./git-cliff-${GIT_CLIFF_VERSION}/git-cliff "${latest_tag}.." --tag "${new_tag}" --strip all)
    # Install GitlabCI cli releasing tool.
    - wget "https://release-cli-downloads.s3.amazonaws.com/latest/${RELEASE_BIN_NAME}"
    - chmod 755 "${RELEASE_BIN_NAME}"
    # Create the new release.
    - ./${RELEASE_BIN_NAME} create
      --name "${new_tag}"
      --description "${release_description}"
      --tag-name "${new_tag}"
      --ref "${CI_COMMIT_SHA}"
      --assets-link '{"name":"x86_64-linux-musl-binary.zip","url":"https://gitlab.com/DeveloperC/conventional_commits_next_version/-/jobs/artifacts/'${new_tag}'/download?job=release-binary-compiling-x86_64-linux-musl"}'
  rules:
    - if: $CI_COMMIT_BRANCH == "master"


crates-io-publishing:
  stage: crates-io-publishing
  image: rust
  script:
    - cargo publish --token "${GITLAB_CRATES_IO_TOKEN}"
  rules:
    - if: $CI_COMMIT_TAG


release-binary-compiling-x86_64-linux-musl:
  stage: release-binary-compiling
  image: rust:alpine
  before_script:
    - apk add --no-cache musl-dev git
  script:
    - cargo build --release --target x86_64-unknown-linux-musl
    - mv target/x86_64-unknown-linux-musl/release/conventional_commits_next_version conventional_commits_next_version
    - strip conventional_commits_next_version
  artifacts:
    paths:
      - conventional_commits_next_version
  rules:
    - if: $CI_COMMIT_TAG

stages:
  - clean-git-history-checking
  - conventional-commits-linting
  - formatting
  - linting
  - compiling
  - unit-testing
  - end-to-end-testing


variables:
  SEMANTIC_VERSIONING_REGEX: "[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*"
  RELEASE_CLI: "release-cli-linux-amd64"
  GIT_CLIFF_VERSION: "0.5.0"
  BIN_DIRECTORY: "conventional_commits_next_version"
  LIB_DIRECTORY: "conventional_commits_next_version_lib"
  END_TO_END_TESTS_DIRECTORY: "${BIN_DIRECTORY}/end-to-end-tests"


clean-git-history-checking:
  stage: clean-git-history-checking
  image: rust
  before_script:
    - cargo install clean_git_history
  script:
    # Check all the commits in the branch.
    - /usr/local/cargo/bin/clean_git_history --from-reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-linting:
  stage: conventional-commits-linting
  image: rust
  before_script:
    - cargo install conventional_commits_linter
  script:
    # Lint all the commits in the branch.
    - /usr/local/cargo/bin/conventional_commits_linter --from-reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}" --allow-angular-type-only
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-next-version-formatting:
  stage: formatting
  image: rust
  before_script:
    - rustup component add rustfmt
  script:
    - cargo fmt --all -- --check --config=group_imports=StdExternalCrate
  rules:
    - if: $CI_MERGE_REQUEST_ID


end-to-end-tests-formatting:
  stage: formatting
  image: python:3-slim
  before_script:
    - pip3 install autopep8
  script:
    - for i in $(du -a "./end-to-end-tests/" | awk '{print $2}' | grep -i "[.]py$"); do
    - cp "$i" "temp.txt"
    - autopep8 --in-place --aggressive --aggressive "$i"
    - cmp "$i" "temp.txt" || ( echo "$i needs formatted." && exit 1 )
    - done
  rules:
    - if: $CI_MERGE_REQUEST_ID


linting:
  stage: linting
  image: rust
  before_script:
    - rustup component add clippy
  script:
    - cargo clippy --verbose --workspace --all-targets -- -D warnings
    - cargo clippy --verbose --workspace --all-targets --all-features -- -D warnings
    - cargo clippy --verbose --workspace --all-targets --no-default-features -- -D warnings
  rules:
    - if: $CI_MERGE_REQUEST_ID


compiling:
  stage: compiling
  image: rust
  script:
    - cargo build --verbose --workspace
    - cargo build --verbose --workspace --all-features
    - cargo build --verbose --workspace --no-default-features
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "master"


unit-testing:
  stage: unit-testing
  image: rust
  script:
    - cargo test --verbose --workspace
    - cargo test --verbose --workspace --all-features
    - cargo test --verbose --workspace --no-default-features
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "master"


end-to-end-testing:
  stage: end-to-end-testing
  image: rust
  before_script:
    - apt update
    - apt install python3-minimal python3-pip git -y
    - cargo build
    - cd "${END_TO_END_TESTS_DIRECTORY}"
    - pip3 install -r requirements.txt
  script:
    - behave
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "master"

image: archlinux/base


stages:
    - formatting
    - builds
    - unit-tests
    - end-to-end-tests
    - tagging


conventional-commits-next-version-formatting:
    stage: formatting
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S rust diffutils gawk grep --noconfirm
    script:
        - for i in $( du -a ./src/ | awk '{print $2}' | grep -i "[.]rs$" ); do
        - echo $i
        - cp $i temp.txt
        - rustfmt $i
        - cmp $i temp.txt
        - done
    rules:
        - if: $CI_COMMIT_BRANCH


end-to-end-tests-formatting:
    stage: formatting
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S python autopep8 --noconfirm
    script:
        - for i in $( du -a ./end-to-end-tests/ | awk '{print $2}' | grep -i "[.]py$" ); do
        - echo $i
        - cp $i temp.txt
        - autopep8 --in-place --aggressive --aggressive $i
        - cmp $i temp.txt
        - done
    rules:
        - if: $CI_COMMIT_BRANCH


builds:
    stage: builds
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel libffi rust --noconfirm
    script:
        - cargo build
    rules:
        - if: $CI_COMMIT_BRANCH


unit-tests:
    stage: unit-tests
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel libffi rust --noconfirm
    script:
        - cargo test
    rules:
        - if: $CI_COMMIT_BRANCH


end-to-end-tests:
    stage: end-to-end-tests
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel libffi rust --noconfirm
        - cargo build --release
        - pacman -S git python python-pip --noconfirm
        - cd end-to-end-tests/
        - pip install -r requirements.txt
    script:
        - behave
    rules:
        - if: $CI_COMMIT_BRANCH


tagging:
    stage: tagging
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel git openssh --noconfirm
        - git config --global user.name "${GITLAB_USER_NAME}"
        - git config --global user.email "${GITLAB_USER_EMAIL}"
    script:
        # Get version.
        - VERSION=`grep '^version = "[0-9].[0-9].[0-9]"$' Cargo.toml | cut -d '"' -f 2`
        - VERSION_EXISTS=`echo $VERSION | grep '^[0-9].[0-9].[0-9]$' | wc -l`
        - test $VERSION_EXISTS -ne 1 && { echo >&2 "Unable to parse out the semantic version. Aborting."; exit 1;}
        # Test if tag already exists for version.
        - VERSION_TAG_EXISTS=`git show-ref --tags -d | awk "/ refs\/tags\/$VERSION/" | wc -l`
        - test $VERSION_TAG_EXISTS -eq 1 && exit 0
        # Setup SSH key to push.
        - eval $(ssh-agent -s)
        - mkdir -p $HOME/.ssh/
        - ssh-keyscan -t rsa gitlab.com > $HOME/.ssh/known_hosts
        - ssh-add <(echo "$GITLAB_CI_AUTO_TAG_KEY" | base64 -d)
        # Create tag and push it.
        - git remote add gitlab git@gitlab.com:DeveloperC/rust-monkey-interpreter.git
        - git tag $VERSION
        - git push gitlab $VERSION
    rules:
        - if: $CI_COMMIT_BRANCH == "master"
